#!/bin/bash

github_token=" " # GitHub Token


while true; do
    read -p "Enter CVE number eg. 2021-1234: " cve_number

    if [[ "$cve_number" =~ ^[0-9]{4}-[0-9]{4}$ ]]; then # Checks if the input is a 4 digit number ranging from 0-9 separated with a "-" followed by another 4 digit with numbers ranging from 0-9
        
        # GitHub API
        api="https://api.github.com/search/code?q=CVE-$cve_number+in:file,path+extension:json"

        # Make the API request and store the response
        url=$(curl -s -u "$github_token:x-oauth-basic" "$api")

        # Check if the url contains any items
        total_count=$(echo "$url" | jq -r '.total_count')
        if [[ "$total_count" -lt 1 ]]; then
            echo "No POC found for CVE-$cve_number"
            exit 1
        fi

        # Grabs the path of the first item in the list
        path=$(echo "$url" | jq -r '.items[0].path')

        # Grabs the name of the repository
        fname=$(echo "$url" | jq -r '.items[0].repository.full_name')

        # Fetch the JSON content
        content=$(curl -s "https://raw.githubusercontent.com/$fname/master/$path")


        # Take items in the JSON list
        name=$(echo "$content" | jq -r '.[0].name')
        html=$(echo "$content" | jq -r '.[0].html_url')
        description=$(echo "$content" | jq -r '.[0].description')
        create_date=$(echo "$content" | jq -r '.[0].created_at')
        update_date=$(echo "$content" | jq -r '.[0].updated_at')
        pushed_date=$(echo "$content" | jq -r '.[0].pushed_at')

        info+="CVE-$cve_number"

        # Check if the name of the CVE is empty
        if [ -z "$name" ]; then
            info+="\nName: No Name for this CVE"
        else
            info+="\nName: $name"
        fi

        # Check if the html url is empty
        if [ -z "$html" ]; then
            info+="\nHTML URL: There is no URL related to this CVE"
        else
            info+="\nHTML URL: $html"
        fi

        # Check if description is empty
        if [ -z "$description" ] || [ "$description" == "null" ]; then
            info+="\nDescription: No Description for this CVE"
        else
            info+="\nDescription: $description"
        fi

        # Check if creation date is empty
        if [ -z "$create_date" ]; then
            info+="\nCreation Date: No Creation Date"
        else
            info+="\nCreation Date: $create_date"
        fi

        # Check if updated date is empty
        if [ -z "$update_date" ]; then
            info+="\nUpdated Date: No Recent Update"
        else
            info+="\nUpdated Date: $update_date"
        fi
        
        # Check if pushed date is empty
        if [ -z "$pushed_date" ]; then
            info+="\nPushed Date: Has not been Pushed"
        else
            info+="\nPushed Date: $pushed_date"
        fi

        echo " "
        echo -e "$info" # Display on screen

        while true; do # Ask if user want to save the presented information above
            echo " "
            read -p "Do you want to save the information? (y/n): " save

            if [ "${save,,}" == "y" ] || [ "${save,,}" == "yes" ]; then
                if [ -e "CVE-$cve_number.txt" ]; then # Check if a folder with the name of the CVE exist
                    read -p "CVE-$cve_number.txt already exist. Do you want to over-write? (y/n): " overwrite # Ask to overwrite
                    if [ "${overwrite,,}" = "y" ]; then
                        echo "$info" > "CVE-$cve_number.txt" # Overwrite the already existing txt folder
                        echo "File Overwritten"
                        break
                    else
                        echo "File not Overwritten"
                    fi

                else
                    echo "$info" >> "CVE-$cve_number.txt" # Save the information into the txt folder
                    echo "Saved to Desktop"   
                    break
                fi

            elif [ "${save,,}" == "n" ] || [ "${save,,}" == "no" ]; then
                echo "Information will not be saved"
                break

            else
                echo "Incorrect input. Please enter yes or no"
            fi

        done

        break

    else
        echo -e'Incorrect input. Try typing an 8-digit number separacted by a "-" in between e.g. 1234-1234\n'
    fi

done

### CVE Proof of Concept ###
# Remove "https://github.com/" from the html url
url=${html#https://github.com/}
# Extract username and repo name (portion before the first "/")
repo=${url#%%/*}

# GitHub APIs
api1="https://api.github.com/repos/$repo/contents/README"
api2="https://api.github.com/repos/$repo/contents/README.md"

# Request for the API
request=$(curl -s -u "$github_token:x-oauth-basic" "$api1")

giturl+=$(echo "$request" | jq -r '.html_url')
if [[ $(echo "$request" | jq -r '.message' ) == "Not Found" ]]; then # If the api1 does not return anything try api2
    request=$(curl -s -u "$github_token:x-oauth-basic" "$api2")
    giturl+=$(echo "$request" | jq -r '.html_url')
fi

#Grabs the base64 content of the content field
encoded_readme=$(echo "$request" | jq -r '.content')

if [[ "$encoded_readme" != "null" ]]; then # Checks if the encoded_readme is not "null"
    echo -e "\nThere is a Proof of Concept for CVE-$cve_number\n"
    
    while true; do
        read -p "Do you want to view the CVE-$cve_number POC? (y/n): " readpoc
        if [ "${readpoc,,}" = "y" ] || [ "${readpoc,,}" = "yes" ]; then
            echo " "
            while true; do
                
                read -p "Where do you want to view CVE-$cve_number Proof of Concept: (Github, ExploitDB, Packetstorm): " view
                
                if [[ "${view,,}" == "github" ]]; then # If user input is GitHub run this
                    echo -e "CVE-$cve_number Proof of Concept\n1.$giturl"

                        while true; do
                            echo " "
                            # Ask user to Download the POC
                            read -p "Do you want to save the Proof of Concept along side all related files for the CVE-$cve_number? (y/n): " choice

                            if [ "${choice,,}" == "y" ] || [ "${choice,,}" == "yes" ]; then # Run this if the user chooses y/Y
                                git clone "$html" "POC-$cve_number" # Clones the POC of the CVE inside a folder named after the CVE
                                exit 0

                            else
                                if [ "${choice,,}" == "n" ] || [ "${choice,,}" == "no" ]; then #If the user chooses n/N just exit out of the code
                                    echo "CVE-$cve_number Proof of Concept will not be saved"
                                    exit 0
                                else
                                    echo "Please enter y or n"
                                fi
                            fi

                        done

                    break

                elif [[ "${view,,}" ==  "exploitdb" ]]; then # If user input is ExploitDB run this
                    sploit=$(searchsploit --cve -j $cve_number) # Search for the CVE using searchsploit

                    EDB_ID=($(echo "$sploit" | jq -r '.RESULTS_EXPLOIT[] | ."EDB-ID"')) # Grab the EDB-ID from the json format of the above result

                    counter=1 # Counter

                    echo -e "\nCVE-$cve_number Proof of Concept"
                    for id in "${EDB_ID[@]}"; do # Loop through each EDB-ID and display the link
                        echo "$counter. https://www.exploit-db.com/exploits/$id"
                        ((counter++)) # Counter up
                    done           
                    exit 0
                
                elif [[ "${view,,}" == "packetstorm" ]]; then # If user input is PacketStorm run this 
                    echo -e "\n CVE-$cve_number Proof of Concept"
                    
                    # Request the contents of the URL
                    link=$(curl -s "https://packetstormsecurity.com/search/?q=CVE-$cve_number")

                    # Use grep to extract .html links from the variable and store them in an array
                    html_links=($(echo "$link" | grep -oP 'href="\K/files/[^"]+\.html'))

                    count=1 # Counter
                    for ppath in "${html_links[@]}"; do
                        echo "$count. https://packetstormsecurity.com$ppath"
                        ((count++)) # Count up
                    done

                    while true; do
                        echo " "
                        # Ask the user to choose a link
                        read -p "Enter the number of the link you want to View: " choice

                        # Check if user inpit is in the range of the length of available number
                        if [[ $choice -ge 1 && $choice -le ${#html_links[@]} ]]; then
                            chosen_link="${html_links[choice - 1]}"

                            # Extract the link to the associated .txt file from the fetched HTML content
                            clink=$(curl -s "https://packetstormsecurity.com$chosen_link")
                            
                            # Request the content of the clink and grabbing the contents where it has a link with /files/downlaod followed by a .txt
                            txtlink=($(echo "$clink" | grep -oP 'href="\K/files/download/[^"]+\.txt'))

                            # Request for the link content
                            dlink=$(curl -s "https://packetstormsecurity.com$txtlink")
                            
                            #Grab the content of the dlink inside the "a href" and removing all brackets and words except the last bracket
                            txt=$(echo "$dlink" | grep -o '<a href="[^"]*">' | sed -e 's/<a href="//' -e 's/">//')
                            
                            echo "$txt"
                            exit 0

                        else
                            echo "Invalid choice. Please enter a valid number."
                        fi

                    done              

                else
                    echo "Incorrect input. Please choose from Github, ExploitDB, or Packetstorm"        
                fi

            done

        elif [ "${readpoc,,}" = "n" ] || [ "${readpoc,,}" = "no" ]; then # If user does not want to view the POC display this
            echo "CVE-$cve_number Proof of Concept will not be viewed"
            exit 0
        else
            echo "Incorrect input. Please enter yes or no"
        fi
    done

else
    echo "No Proof of Concept available for CVE-$cve_number"
    exit 0
fi